name: Build
on:
  push:
    branches:
      - add_whitesource
    paths-ignore:
      - '.gitignore'
#      - '.github/**'
      - '**/*.md'
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  Test_Build:
    name: Run Tests and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'
          cache: 'maven'
      - name: Set Build Params
        run: |
          export SKIP_FLAGS_NON_UNIT_TESTS="-Dcheckstyle.skip -Dpmd.skip -Dcpd.skip -Dfindbugs.skip -Dspotbugs.skip"
          echo "SKIP_FLAGS_NON_UNIT_TESTS=$SKIP_FLAGS_NON_UNIT_TESTS" >> $GITHUB_ENV
          echo "SKIP_FLAGS_ALL_TESTS=$SKIP_FLAGS_NON_UNIT_TESTS -Dmaven.test.skip=true" >> $GITHUB_ENV
          if [[ $GITHUB_EVENT_NAME != "pull_request" && $GITHUB_REF_NAME="add_whitesource" ]]; then
            export WHITESOURCE_SCAN=true
            export GITHUB_PACKAGES_DEPLOY=true
          else
            export WHITESOURCE_SCAN=false
            export GITHUB_PACKAGES_DEPLOY=false
          fi
          echo "$WHITESOURCE_SCAN"
          echo "WHITESOURCE_SCAN=$WHITESOURCE_SCAN" >> $GITHUB_ENV
          echo "GITHUB_PACKAGES_DEPLOY=$GITHUB_PACKAGES_DEPLOY" >> $GITHUB_ENV
      - name: Static Code Analysis
        run: mvn -B compile -Pmaas-static-code-analysis --file service/pom.xml
      - name: Unit Tests
        run: mvn -B test $SKIP_FLAGS_NON_UNIT_TESTS --file service/pom.xml
      - name: Generate Artifacts
        run: |
          mvn install $SKIP_FLAGS_ALL_TESTS --file service/pom.xml
      - name: Sonar Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B $SKIP_FLAGS_ALL_TESTS \
            org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=SolaceLabs_runtime-agent \
            --file service/pom.xml
      - name: Whitesource Scan
        if: env.WHITESOURCE_SCAN=='true'
        env:
          unified_agent_url: "https://github.com/whitesource/unified-agent-distribution/releases/latest/download/wss-unified-agent.jar"
          unified_agent_sha_url: "https://github.com/whitesource/unified-agent-distribution/releases/latest/download/wss-unified-agent.jar.sha256"
          WS_APIKEY: ${{ secrets.WHITESOURCE_API_KEY }}
          WS_PROJECTTOKEN: ${{ secrets.WHITESOURCE_PROJECT_TOKEN }}
          TARGET_DIR: "service/application/target/lib"
          WS_EXCLUDES: "local-storage-plugin*.jar,plugin*.jar,kafka-plugin*.jar,confluent-schema-registry-plugin*.jar"
        run: |
          echo "Whitesource- Downloading and verifying latest Agent"

          curl -LJOs ${{ env.unified_agent_url }}
          sha_from_jar=$(sha256sum  wss-unified-agent.jar | awk '{print $1}')
          curl -LJOs ${{ env.unified_agent_sha_url }}
          sha_from_file=$(cat wss-unified-agent.jar.sha256 | awk '{print $1}')
          if [[ "$sha_from_file" == "$sha_from_jar" ]]; then
              echo "Integrity of the wss-unified-agent.jar file verified .."
          else
              echo "Integrity check of wss-unified-agent.jar file failed .."
              echo "sha_from_jar: $sha_from_jar"
              echo "sha_from_file: $sha_from_file"
              exit 1
          fi

          echo "Whitesource- Copying Maven Dependencies"
          mvn dependency:copy-dependencies -DincludeScope=runtime -DoutputDirectory=target/lib --file service/pom.xml

          echo "Whitesource- Running scan"
          java -jar wss-unified-agent.jar -d  ${{ env.TARGET_DIR }}  -logLevel Info

#      - name: Deploy Artifacts
#        if: env.GITHUB_PACKAGES_DEPLOY=='true'
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          mvn deploy $SKIP_FLAGS_ALL_TESTS -Dmaven.install.skip=true --file service/pom.xml
