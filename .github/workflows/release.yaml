name: Release
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: "Default version to use when preparing a release."
        required: true
        default: "X.Y.Z"
      developmentVersion:
        description: "Default version to use for new local working copy."
        required: true
        default: "X.Y.Z-SNAPSHOT"
jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'
          cache: 'maven'
      - name: Pre-Release Check - Authenticate User
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/SolaceLabs/teams/ema-release-team/members
#          gh api --method GET /orgs/SolaceLabs/teams/ema-release-team/members
#          > release_team.json
#          user_is_in_release_team = $(jq -r --arg RELEASE_ACTOR ${{ github.actor }} '.[].login|select(.==$RELEASE_ACTOR)' release_team.json)
#          if [[ -z "$user_is_in_release_team" ]]; then
#                echo "Current user (${{ github.actor }}) is in ema-release-team ✅."
#          else
#                echo "❌ Current user (${{ github.actor }}) is not authorized for release."
#                exit 1
#          fi
#      - name: Pre-Release Check - Version
#        env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          gh api --method GET /repos/${{github.repository}}/releases -f sort=updated -f direction=asc > releases.json
#          release_version_exists=$(jq -r --arg RELEASE_VERSION v${{ github.event.inputs.releaseVersion }} '.[].name|select(.|test($RELEASE_VERSION))'  releases.json)
#          if [[ ! -z "$release_version_exists" ]]; then
#                echo "Version ${{ github.event.inputs.releaseVersion }} has been previously released. Please change release version."
#                exit 1
#          else
#                echo "New version: ${{ github.event.inputs.releaseVersion }} going to be released!"
#          fi
#      - name: Set up Python 3.8
#        uses: actions/setup-python@v4
#        with:
#          python-version: 3.8
#          cache: 'pip'
#      - name: Pre-Release Check - Whitesource vulnurabilities
#        env:
#          WS_APIKEY: ${{ secrets.WHITESOURCE_API_KEY }}
#          WS_PROJECTTOKEN: ${{ secrets.WHITESOURCE_PROJECT_TOKEN }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#        run: |
#          pip install --quiet --upgrade pip
#          export VIRTUAL_ENV=./venv
#          python3.8 -m venv $VIRTUAL_ENV && source $VIRTUAL_ENV/bin/activate
#          cd ./.github/workflows/release_scripts/  && pip install --quiet -r requirements.txt && python3.8 whitesource_vulnurability_checker.py
#      - name: Set Release Configs
#        run: |
#          export SKIP_FLAGS_NON_UNIT_TESTS="-Dcheckstyle.skip -Dpmd.skip -Dcpd.skip -Dfindbugs.skip -Dspotbugs.skip"
#          echo "SKIP_FLAGS_NON_UNIT_TESTS=$SKIP_FLAGS_NON_UNIT_TESTS" >> $GITHUB_ENV
#          echo "SKIP_FLAGS_ALL_TESTS=$SKIP_FLAGS_NON_UNIT_TESTS -Dmaven.test.skip=true" >> $GITHUB_ENV
#          git config user.email "actions@github.com"
#          git config user.name "GitHub Actions"
#      - name: Maven Release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: mvn release:prepare release:perform -B --file service/pom.xml -DreleaseVersion=${{ github.event.inputs.releaseVersion }} -DdevelopmentVersion=${{ github.event.inputs.developmentVersion }}
#      - name: Changelog
#        uses: Bullrich/generate-release-changelog@master
#        id: Changelog
#        env:
#          REPO: ${{ github.repository }}
#      - name: Create GitHub Release
#        uses: ncipollo/release-action@v1
#        with:
#          tag: "v${{ github.event.inputs.releaseVersion }}"
#          artifacts: "**/application/target/*.jar"
#          generateReleaseNotes: true
#          makeLatest: true
#          body: ${{ steps.Changelog.outputs.changelog }}